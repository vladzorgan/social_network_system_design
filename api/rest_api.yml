openapi: 3.0.3
info:
  title: API для социальной сети
  description: |-
    Небольшое API для социальной сети
  version: 1.0.0
servers:
  - url: https://social-project.swagger.io/api/v1
tags:
  - name: users
    description: Operations about user
  - name: friends
    description: Operations about user
  - name: post
    description: Operations about post
  - name: wall
    description: Operations about wall
  - name: dialog
    description: Operations about dialog
  - name: message
    description: Operations about message
paths:
  /friends/add:
    post:
      tags:
        - friends
      summary: Add a new friend
      description: Add a new friend to user
      operationId: addFriend
      requestBody:
        description: Add a new friend to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Friend'
          application/xml:
            schema:
              $ref: '#/components/schemas/Friend'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Friend'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
            application/xml:
              schema:
                $ref: '#/components/schemas/Friend'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - social_auth:
            - write:friend
            - read:friend
  /friends/delete:
    delete:
      tags:
        - friends
      summary: Deletes a friend
      description: delete a pet
      operationId: deletePet
      responses:
        '400':
          description: Invalid pet value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /user/{userId}/friends:
    get:
      tags:
        - users
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: userId
          in: path
          description: User ID for friends filter
          required: true
          schema:
            type: string
            default: available
            enum:
              - available
              - pending
              - sold
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
      security:
        - social_auth:
            - write:pets
            - read:pets
  /user/{userId}:
    get:
      tags:
        - users
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findUserById
      parameters:
        - name: userId
          in: path
          description: Status values that need to be considered for filter
          required: true
          schema:
            type: integer
            default: available
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Invalid status value
      security:
        - social_auth:
            - write:user
            - read:user
  /post:
    post:
      tags:
        - post
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
          application/xml:
            schema:
              $ref: '#/components/schemas/Post'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /wall:
    get:
      tags:
        - users
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: getWall
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wall'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wall'
        '400':
          description: Invalid status value
      security:
        - social_auth:
            - write:wall
            - read:wall
  /wall/{userId}:
    get:
      tags:
        - users
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: getWallByUserId
      parameters:
        - name: userId
          in: path
          description: UserId that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wall'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Wall'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /dialog/{userId}:
    get:
      tags:
        - users
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: getDialogByUserId
      parameters:
        - name: userId
          in: path
          description: UserId values that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dialog'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dialog'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - write:pets
            - read:pets
  /message/send:
    post:
      tags:
        - post
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: postMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/xml:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /message/read:
    post:
      tags:
        - post
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: readMessage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
          application/xml:
            schema:
              $ref: '#/components/schemas/Message'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          format: int64
          example: Ivan
        is_online:
          type: boolean
    Friend:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        friendId:
          type: integer
          format: int64
          example: 198772
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        userId:
          type: integer
          format: int64
          example: 198772
        content:
          type: string
    Wall:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        posts:
          type: array
          items: {}
    Dialog:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        friendId:
          type: integer
          format: int64
          example: 198772
    Message:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 10
        friendId:
          type: integer
          format: int64
          example: 198772
        content:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    social_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://social.swagger.io/oauth/authorize
          scopes:
            write:message: modify your message
            read:message: read your message

            read:friends: read your friends
            write:friends: modify your friends

            read:dialog: read your dialogs
            write:dialog: modify your dialogs

            read:post: read your posts
            write:post: modify your posts

            read:wall: read your wall
            write:wall: modify your wall
    api_key:
      type: apiKey
      name: api_key
      in: header
